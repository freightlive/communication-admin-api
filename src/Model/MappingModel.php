<?php
/**
 * MappingModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalCommunicationAdmin
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Communication Administration API
 *
 * Bumbal Communication Server Administration API documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalCommunicationAdmin\Model;

use \ArrayAccess;

/**
 * MappingModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalCommunicationAdmin
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MappingModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MappingModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'template_id' => 'int',
        'template_name' => 'string',
        'template' => '\BumbalCommunicationAdmin\Model\TemplateModel',
        'delivery_method_id' => 'int',
        'delivery_method_name' => 'string',
        'message_type_id' => 'int',
        'message_type_name' => 'string',
        'no_tag' => 'bool',
        'tags' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'template_id' => null,
        'template_name' => null,
        'template' => null,
        'delivery_method_id' => null,
        'delivery_method_name' => null,
        'message_type_id' => null,
        'message_type_name' => null,
        'no_tag' => null,
        'tags' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'template_id' => 'template_id',
        'template_name' => 'template_name',
        'template' => 'template',
        'delivery_method_id' => 'delivery_method_id',
        'delivery_method_name' => 'delivery_method_name',
        'message_type_id' => 'message_type_id',
        'message_type_name' => 'message_type_name',
        'no_tag' => 'no_tag',
        'tags' => 'tags'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'template_id' => 'setTemplateId',
        'template_name' => 'setTemplateName',
        'template' => 'setTemplate',
        'delivery_method_id' => 'setDeliveryMethodId',
        'delivery_method_name' => 'setDeliveryMethodName',
        'message_type_id' => 'setMessageTypeId',
        'message_type_name' => 'setMessageTypeName',
        'no_tag' => 'setNoTag',
        'tags' => 'setTags'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'template_id' => 'getTemplateId',
        'template_name' => 'getTemplateName',
        'template' => 'getTemplate',
        'delivery_method_id' => 'getDeliveryMethodId',
        'delivery_method_name' => 'getDeliveryMethodName',
        'message_type_id' => 'getMessageTypeId',
        'message_type_name' => 'getMessageTypeName',
        'no_tag' => 'getNoTag',
        'tags' => 'getTags'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['delivery_method_id'] = isset($data['delivery_method_id']) ? $data['delivery_method_id'] : null;
        $this->container['delivery_method_name'] = isset($data['delivery_method_name']) ? $data['delivery_method_name'] : null;
        $this->container['message_type_id'] = isset($data['message_type_id']) ? $data['message_type_id'] : null;
        $this->container['message_type_name'] = isset($data['message_type_name']) ? $data['message_type_name'] : null;
        $this->container['no_tag'] = isset($data['no_tag']) ? $data['no_tag'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets template_id
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     * @param int $template_id Template ID
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets template_name
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     * @param string $template_name Template Name
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets template
     * @return \BumbalCommunicationAdmin\Model\TemplateModel
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param \BumbalCommunicationAdmin\Model\TemplateModel $template 
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets delivery_method_id
     * @return int
     */
    public function getDeliveryMethodId()
    {
        return $this->container['delivery_method_id'];
    }

    /**
     * Sets delivery_method_id
     * @param int $delivery_method_id Delivery Method ID
     * @return $this
     */
    public function setDeliveryMethodId($delivery_method_id)
    {
        $this->container['delivery_method_id'] = $delivery_method_id;

        return $this;
    }

    /**
     * Gets delivery_method_name
     * @return string
     */
    public function getDeliveryMethodName()
    {
        return $this->container['delivery_method_name'];
    }

    /**
     * Sets delivery_method_name
     * @param string $delivery_method_name Delivery Method Name
     * @return $this
     */
    public function setDeliveryMethodName($delivery_method_name)
    {
        $this->container['delivery_method_name'] = $delivery_method_name;

        return $this;
    }

    /**
     * Gets message_type_id
     * @return int
     */
    public function getMessageTypeId()
    {
        return $this->container['message_type_id'];
    }

    /**
     * Sets message_type_id
     * @param int $message_type_id MessageType ID
     * @return $this
     */
    public function setMessageTypeId($message_type_id)
    {
        $this->container['message_type_id'] = $message_type_id;

        return $this;
    }

    /**
     * Gets message_type_name
     * @return string
     */
    public function getMessageTypeName()
    {
        return $this->container['message_type_name'];
    }

    /**
     * Sets message_type_name
     * @param string $message_type_name MessageType Name
     * @return $this
     */
    public function setMessageTypeName($message_type_name)
    {
        $this->container['message_type_name'] = $message_type_name;

        return $this;
    }

    /**
     * Gets no_tag
     * @return bool
     */
    public function getNoTag()
    {
        return $this->container['no_tag'];
    }

    /**
     * Sets no_tag
     * @param bool $no_tag No Tag Flag
     * @return $this
     */
    public function setNoTag($no_tag)
    {
        $this->container['no_tag'] = $no_tag;

        return $this;
    }

    /**
     * Gets tags
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string $tags JSON encoded Array with Bumbal Tag ID's
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalCommunicationAdmin\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalCommunicationAdmin\ObjectSerializer::sanitizeForSerialization($this));
    }
}


