<?php
/**
 * MessageModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalCommunicationAdmin
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Communication Administration API
 *
 * Bumbal Communication Server Administration API documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model;

use \ArrayAccess;

/**
 * MessageModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalCommunicationAdmin
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MessageModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MessageModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'delivery_method_id' => 'int',
        'delivery_method_name' => 'string',
        'message_type_id' => 'int',
        'message_type_name' => 'string',
        'activity_id' => 'int',
        'template' => '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\TemplateModel',
        'scheduled_job' => '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ScheduledJobModel',
        'provider_id' => 'int',
        'provider_name' => 'string',
        'provider_reference' => 'string',
        'sent' => 'bool',
        'history' => '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageHistoryModel[]',
        'content' => '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageContentModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'delivery_method_id' => null,
        'delivery_method_name' => null,
        'message_type_id' => null,
        'message_type_name' => null,
        'activity_id' => null,
        'template' => null,
        'scheduled_job' => null,
        'provider_id' => null,
        'provider_name' => null,
        'provider_reference' => null,
        'sent' => null,
        'history' => null,
        'content' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'delivery_method_id' => 'delivery_method_id',
        'delivery_method_name' => 'delivery_method_name',
        'message_type_id' => 'message_type_id',
        'message_type_name' => 'message_type_name',
        'activity_id' => 'activity_id',
        'template' => 'template',
        'scheduled_job' => 'scheduled_job',
        'provider_id' => 'provider_id',
        'provider_name' => 'provider_name',
        'provider_reference' => 'provider_reference',
        'sent' => 'sent',
        'history' => 'history',
        'content' => 'content'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'delivery_method_id' => 'setDeliveryMethodId',
        'delivery_method_name' => 'setDeliveryMethodName',
        'message_type_id' => 'setMessageTypeId',
        'message_type_name' => 'setMessageTypeName',
        'activity_id' => 'setActivityId',
        'template' => 'setTemplate',
        'scheduled_job' => 'setScheduledJob',
        'provider_id' => 'setProviderId',
        'provider_name' => 'setProviderName',
        'provider_reference' => 'setProviderReference',
        'sent' => 'setSent',
        'history' => 'setHistory',
        'content' => 'setContent'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'delivery_method_id' => 'getDeliveryMethodId',
        'delivery_method_name' => 'getDeliveryMethodName',
        'message_type_id' => 'getMessageTypeId',
        'message_type_name' => 'getMessageTypeName',
        'activity_id' => 'getActivityId',
        'template' => 'getTemplate',
        'scheduled_job' => 'getScheduledJob',
        'provider_id' => 'getProviderId',
        'provider_name' => 'getProviderName',
        'provider_reference' => 'getProviderReference',
        'sent' => 'getSent',
        'history' => 'getHistory',
        'content' => 'getContent'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['delivery_method_id'] = isset($data['delivery_method_id']) ? $data['delivery_method_id'] : null;
        $this->container['delivery_method_name'] = isset($data['delivery_method_name']) ? $data['delivery_method_name'] : null;
        $this->container['message_type_id'] = isset($data['message_type_id']) ? $data['message_type_id'] : null;
        $this->container['message_type_name'] = isset($data['message_type_name']) ? $data['message_type_name'] : null;
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['scheduled_job'] = isset($data['scheduled_job']) ? $data['scheduled_job'] : null;
        $this->container['provider_id'] = isset($data['provider_id']) ? $data['provider_id'] : null;
        $this->container['provider_name'] = isset($data['provider_name']) ? $data['provider_name'] : null;
        $this->container['provider_reference'] = isset($data['provider_reference']) ? $data['provider_reference'] : null;
        $this->container['sent'] = isset($data['sent']) ? $data['sent'] : null;
        $this->container['history'] = isset($data['history']) ? $data['history'] : null;
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets delivery_method_id
     * @return int
     */
    public function getDeliveryMethodId()
    {
        return $this->container['delivery_method_id'];
    }

    /**
     * Sets delivery_method_id
     * @param int $delivery_method_id DeliveryMethod ID
     * @return $this
     */
    public function setDeliveryMethodId($delivery_method_id)
    {
        $this->container['delivery_method_id'] = $delivery_method_id;

        return $this;
    }

    /**
     * Gets delivery_method_name
     * @return string
     */
    public function getDeliveryMethodName()
    {
        return $this->container['delivery_method_name'];
    }

    /**
     * Sets delivery_method_name
     * @param string $delivery_method_name DeliveryMethod Name
     * @return $this
     */
    public function setDeliveryMethodName($delivery_method_name)
    {
        $this->container['delivery_method_name'] = $delivery_method_name;

        return $this;
    }

    /**
     * Gets message_type_id
     * @return int
     */
    public function getMessageTypeId()
    {
        return $this->container['message_type_id'];
    }

    /**
     * Sets message_type_id
     * @param int $message_type_id MessageType ID
     * @return $this
     */
    public function setMessageTypeId($message_type_id)
    {
        $this->container['message_type_id'] = $message_type_id;

        return $this;
    }

    /**
     * Gets message_type_name
     * @return string
     */
    public function getMessageTypeName()
    {
        return $this->container['message_type_name'];
    }

    /**
     * Sets message_type_name
     * @param string $message_type_name MessageType Name
     * @return $this
     */
    public function setMessageTypeName($message_type_name)
    {
        $this->container['message_type_name'] = $message_type_name;

        return $this;
    }

    /**
     * Gets activity_id
     * @return int
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     * @param int $activity_id Activity ID
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets template
     * @return \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\TemplateModel
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\TemplateModel $template
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets scheduled_job
     * @return \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ScheduledJobModel
     */
    public function getScheduledJob()
    {
        return $this->container['scheduled_job'];
    }

    /**
     * Sets scheduled_job
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ScheduledJobModel $scheduled_job
     * @return $this
     */
    public function setScheduledJob($scheduled_job)
    {
        $this->container['scheduled_job'] = $scheduled_job;

        return $this;
    }

    /**
     * Gets provider_id
     * @return int
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     * @param int $provider_id Provider ID
     * @return $this
     */
    public function setProviderId($provider_id)
    {
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets provider_name
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     * @param string $provider_name Provider Name
     * @return $this
     */
    public function setProviderName($provider_name)
    {
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets provider_reference
     * @return string
     */
    public function getProviderReference()
    {
        return $this->container['provider_reference'];
    }

    /**
     * Sets provider_reference
     * @param string $provider_reference Reference used by Provider
     * @return $this
     */
    public function setProviderReference($provider_reference)
    {
        $this->container['provider_reference'] = $provider_reference;

        return $this;
    }

    /**
     * Gets sent
     * @return bool
     */
    public function getSent()
    {
        return $this->container['sent'];
    }

    /**
     * Sets sent
     * @param bool $sent Message Sent flag
     * @return $this
     */
    public function setSent($sent)
    {
        $this->container['sent'] = $sent;

        return $this;
    }

    /**
     * Gets history
     * @return \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageHistoryModel[]
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageHistoryModel[] $history
     * @return $this
     */
    public function setHistory($history)
    {
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets content
     * @return \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageContentModel
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageContentModel $content
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalCommunicationAdmin\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalCommunicationAdmin\ObjectSerializer::sanitizeForSerialization($this));
    }
}


