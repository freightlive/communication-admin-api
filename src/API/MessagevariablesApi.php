<?php
/**
 * MessagevariablesApi
 * PHP version 5
 *
 * @category Class
 * @package  BumbalCommunicationAdmin
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Communication Administration API
 *
 * Bumbal Communication Server Administration API documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalCommunicationAdmin\BumbalCommunicationAdmin\API;

use \BumbalCommunicationAdmin\ApiClient;
use \BumbalCommunicationAdmin\ApiException;
use \BumbalCommunicationAdmin\Configuration;
use \BumbalCommunicationAdmin\ObjectSerializer;

/**
 * MessagevariablesApi Class Doc Comment
 *
 * @category Class
 * @package  BumbalCommunicationAdmin
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessagevariablesApi
{
    /**
     * API Client
     *
     * @var \BumbalCommunicationAdmin\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BumbalCommunicationAdmin\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\BumbalCommunicationAdmin\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \BumbalCommunicationAdmin\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \BumbalCommunicationAdmin\ApiClient $apiClient set the API client
     *
     * @return MessagevariablesApi
     */
    public function setApiClient(\BumbalCommunicationAdmin\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createMessageVariable
     *
     * Create a MessageVariable
     *
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel $body MessageVariable object (required)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse
     */
    public function createMessageVariable($body)
    {
        list($response) = $this->createMessageVariableWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createMessageVariableWithHttpInfo
     *
     * Create a MessageVariable
     *
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel $body MessageVariable object (required)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return array of \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMessageVariableWithHttpInfo($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling createMessageVariable');
        }
        // parse inputs
        $resourcePath = "/message-variable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse',
                '/message-variable'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteMessageVariable
     *
     * Delete a message variables
     *
     * @param int $message_variable_id ID of the message variable to delete (required)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse
     */
    public function deleteMessageVariable($message_variable_id)
    {
        list($response) = $this->deleteMessageVariableWithHttpInfo($message_variable_id);
        return $response;
    }

    /**
     * Operation deleteMessageVariableWithHttpInfo
     *
     * Delete a message variables
     *
     * @param int $message_variable_id ID of the message variable to delete (required)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return array of \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMessageVariableWithHttpInfo($message_variable_id)
    {
        // verify the required parameter 'message_variable_id' is set
        if ($message_variable_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message_variable_id when calling deleteMessageVariable');
        }
        // parse inputs
        $resourcePath = "/message-variable/{messageVariableId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($message_variable_id !== null) {
            $resourcePath = str_replace(
                "{" . "messageVariableId" . "}",
                $this->apiClient->getSerializer()->toPathValue($message_variable_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse',
                '/message-variable/{messageVariableId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveListMessageVariables
     *
     * Retrieve List of Message Variables
     *
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableRetrieveListArguments $arguments MessageVariables RetrieveList Arguments (required)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel[]
     */
    public function retrieveListMessageVariables($arguments)
    {
        list($response) = $this->retrieveListMessageVariablesWithHttpInfo($arguments);
        return $response;
    }

    /**
     * Operation retrieveListMessageVariablesWithHttpInfo
     *
     * Retrieve List of Message Variables
     *
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableRetrieveListArguments $arguments MessageVariables RetrieveList Arguments (required)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return array of \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel[], HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveListMessageVariablesWithHttpInfo($arguments)
    {
        // verify the required parameter 'arguments' is set
        if ($arguments === null) {
            throw new \InvalidArgumentException('Missing the required parameter $arguments when calling retrieveListMessageVariables');
        }
        // parse inputs
        $resourcePath = "/message-variable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($arguments)) {
            $_tempBody = $arguments;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel[]',
                '/message-variable'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveMessageVariable
     *
     * Retrieve a message variable
     *
     * @param int $message_variable_id ID of message variable to return (required)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel
     */
    public function retrieveMessageVariable($message_variable_id)
    {
        list($response) = $this->retrieveMessageVariableWithHttpInfo($message_variable_id);
        return $response;
    }

    /**
     * Operation retrieveMessageVariableWithHttpInfo
     *
     * Retrieve a message variable
     *
     * @param int $message_variable_id ID of message variable to return (required)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return array of \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveMessageVariableWithHttpInfo($message_variable_id)
    {
        // verify the required parameter 'message_variable_id' is set
        if ($message_variable_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message_variable_id when calling retrieveMessageVariable');
        }
        // parse inputs
        $resourcePath = "/message-variable/{messageVariableId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($message_variable_id !== null) {
            $resourcePath = str_replace(
                "{" . "messageVariableId" . "}",
                $this->apiClient->getSerializer()->toPathValue($message_variable_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel',
                '/message-variable/{messageVariableId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMessageVariable
     *
     * Update an MessageVariable
     *
     * @param int $message_variable_id ID of Message Variable to update (required)
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel $body Message Variable object that needs to be updated (optional)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse
     */
    public function updateMessageVariable($message_variable_id, $body = null)
    {
        list($response) = $this->updateMessageVariableWithHttpInfo($message_variable_id, $body);
        return $response;
    }

    /**
     * Operation updateMessageVariableWithHttpInfo
     *
     * Update an MessageVariable
     *
     * @param int $message_variable_id ID of Message Variable to update (required)
     * @param \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\MessageVariableModel $body Message Variable object that needs to be updated (optional)
     * @throws \BumbalCommunicationAdmin\ApiException on non-2xx response
     * @return array of \BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMessageVariableWithHttpInfo($message_variable_id, $body = null)
    {
        // verify the required parameter 'message_variable_id' is set
        if ($message_variable_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $message_variable_id when calling updateMessageVariable');
        }
        // parse inputs
        $resourcePath = "/message-variable/{messageVariableId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($message_variable_id !== null) {
            $resourcePath = str_replace(
                "{" . "messageVariableId" . "}",
                $this->apiClient->getSerializer()->toPathValue($message_variable_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse',
                '/message-variable/{messageVariableId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalCommunicationAdmin\BumbalCommunicationAdmin\Model\ApiResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
